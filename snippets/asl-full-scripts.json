{
	"a generic script with all blocks": {
		"prefix": ["fs", "fullscript"],
		"description": "Creates a generic ASL script with all available blocks.",
		"body": [
			"// Describes the process the script should attach to as well as relevant pointer paths.",
			"state(\"${1:process}\")",
			"{",
			"\t$0// int name : \"module\", 0x123456, 0x12, 0x34, 0x56;",
			"}",
			"",
			"// Runs when the script is (re-)loaded by LiveSplit.",
			"startup",
			"{",
			"\t// settings.Add(\"id\", true, \"description\");",
			"\t// settings.Add(\"id\", true, \"description\", \"parent\");",
			"\t// settings.SetToolTip(\"id\", \"tooltip\");",
			"}",
			"",
			"// Runs when the timer starts, independent from whether the script or the user did it.",
			"onStart",
			"{",
			"",
			"}",
			"",
			"// Runs when a split is made, independent from whether the script or the user did it.",
			"onSplit",
			"{",
			"",
			"}",
			"",
			"// Runs when the timer resets, independent from whether the script or the user did it.",
			"onReset",
			"{",
			"",
			"}",
			"",
			"// Runs when the process has been found according to at least one of the state descriptors.",
			"init",
			"{",
			"",
			"}",
			"",
			"// This action runs first on every iteration. Explicitly returning false disables all other actions.",
			"update",
			"{",
			"",
			"}",
			"",
			"// Returning true in this action will start the timer and run the onStart action.",
			"start",
			"{",
			"",
			"}",
			"",
			"// Returning true in this action will trigger a split and run the onSplit action.",
			"split",
			"{",
			"",
			"}",
			"",
			"// Returning true in this action will reset the timer and run the onReset action.",
			"reset",
			"{",
			"",
			"}",
			"",
			"// Returning a TimeSpan object in this action will set the timer's game time to the return value.",
			"// When using this block, it is usually recommended to also return true in isLoading.",
			"",
			"gameTime",
			"{",
			"",
			"}",
			"",
			"// Returning true in this action will pause the timer's game time.",
			"isLoading",
			"{",
			"",
			"}",
			"",
			"// This action is run when the currently attached process exits.",
			"exit",
			"{",
			"",
			"}",
			"",
			"// This action is run when the script is entirely disconnected from LiveSplit.",
			"// Examples include when the Auto Splitter is disabled, LiveSplit exits, the script path is changed, or the script is reloaded.",
			"shutdown",
			"{",
			"",
			"}"
		]
	},
	"a fully prepared script for multi-threading": {
		"prefix": ["thcsf", "threadfull"],
		"description": "Creates a full ASL script ready for using another thread.",
		"body": [
			"state(\"${1:process}\") {}",
			"",
			"startup",
			"{",
			"\tvars.Log = (Action<object>)((output) => print(\"[${1} ASL] \" + output));",
			"}",
			"",
			"init",
			"{",
			"\t// WARNING: if an error is thrown in the thread, LiveSplit crashes!",
			"\t// Use token.IsCancellationRequested to exit any long-running loops.",
			"",
			"\tvars.${2:IsCompleted} = false;",
			"\tvars.${3:CancelSource} = new CancellationTokenSource();",
			"\tnew Thread(() =>",
			"\t{",
			"\t\t// Thread.Sleep(1000);",
			"\t\t// var token = vars.${3}.Token;",
			"",
			"\t\t$0",
			"",
			"\t\tvars.${2} = true;",
			"\t}).Start();",
			"}",
			"",
			"update",
			"{",
			"\tif (!vars.${2}) return false;",
			"}",
			"",
			"exit",
			"{",
			"\tvars.${3}.Cancel();",
			"}",
			"",
			"shutdown",
			"{",
			"\tvars.${3}.Cancel();",
			"}"
		]
	},
	"a fully prepared script for using asynchronous tasks": {
		"prefix": ["tcsf", "taskfull"],
		"description": "Creates a full ASL script ready for using another thread.",
		"body": [
			"state(\"${1:process}\") {}",
			"",
			"startup",
			"{",
			"\tvars.Log = (Action<object>)((output) => print(\"[${1} ASL] \" + output));",
			"}",
			"",
			"init",
			"{",
			"\t// WARNING: if an error is thrown in the thread, LiveSplit crashes!",
			"\t// Use token.IsCancellationRequested to exit any long-running loops.",
			"",
			"\tvars.${2:IsCompleted} = false;",
			"\tvars.${3:CancelSource} = new CancellationTokenSource();",
			"\tSystem.Threading.Tasks.Task.Run((Action)(async () =>",
			"\t{",
			"\t\t// await System.Threading.Tasks.Task.Delay(1000);",
			"\t\t// var token = vars.${3}.Token;",
			"",
			"\t\t$0",
			"",
			"\t\tvars.${2} = true;",
			"\t}), vars.${3}.Token);",
			"}",
			"",
			"update",
			"{",
			"\tif (!vars.${2}) return false;",
			"}",
			"",
			"exit",
			"{",
			"\tvars.${3}.Cancel();",
			"}",
			"",
			"shutdown",
			"{",
			"\tvars.${3}.Cancel();",
			"}"
		]
	}
}